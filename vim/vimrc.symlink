call plug#begin('~/.vim/plugged')

Plug 'vim-scripts/bufkill.vim'

Plug 'preservim/nerdcommenter'
Plug 'fboender/bexec'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-endwise'
Plug 'Raimondi/delimitMate'
Plug 'tmhedberg/matchit'

Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'bronson/vim-visual-star-search'

Plug 'ervandew/supertab'

Plug 'w0rp/ale'

Plug 'sheerun/vim-polyglot'

Plug 'tpope/vim-bundler'

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'garbas/vim-snipmate'
Plug 'tomtom/tlib_vim'

Plug 'editorconfig/editorconfig-vim'

" Trying new things
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'AndrewRadev/splitjoin.vim' " gS and gJ

source ~/dotfiles/vim/plugins/airline.vim
source ~/dotfiles/vim/plugins/nerdtree.vim
source ~/dotfiles/vim/plugins/coc.vim
source ~/dotfiles/vim/plugins/vim-sandwich.vim
" This is promising but it's slower and... doens't feel quite right?
" source ~/dotfiles/vim/plugins/telescope.vim
source ~/dotfiles/vim/plugins/bufferline.vim
source ~/dotfiles/vim/plugins/base16.vim
source ~/dotfiles/vim/plugins/fzf.vim

" What are the benefits of treesitter for now?
" source ~/dotfiles/vim/plugins/nvim-treesitter.vim

" What about I learn about vim-textobj-ruby?
" I wanna try this too eventually? moll/vim-bbye
" With: let g:splitjoin_ruby_curly_braces = 0
"
call plug#end()

set shell=$SHELL
if has("gui_running")
  set guioptions-=T "Remove toolbar
  set guifont=DroidSansMono\ Nerd\ Font:h16 " for airline
  " Key for tab navigation
  nmap <silent> <C-Tab> :maca _cycleWindows:<CR>
  nmap <silent> <C-S-Tab> :maca _cycleWindowsBackwards:<CR>
  set balloondelay=100000 " Long balloon to avoir huge tooltip in ruby files
endif

set termguicolors

set nobackup
set noswapfile
set nojoinspaces

set number
set showmode
set tabstop=2 shiftwidth=2 softtabstop=2 et
set linebreak

set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,.DS_Store,*.pyc,*/tmp/*,*/dist/*,

set cursorline

set list listchars=tab:»\ ,trail:·,nbsp:+

filetype on
" filetype plugin indent on
set backspace=2
set vb "visual bell

set history=100
set scrolloff=5
set ignorecase
set infercase " Gives case sensitive autocompletion
set smartcase
set gdefault " Always search/replace globally
set nostartofline

fun! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfun
call SetupCommandAlias("W","w")

"Key bidings
let mapleader = ","
let g:mapleader = ","

" nvim changed Y to y$, but old habits die hard
unmap Y

"Moving around windows (taken from Derek Wyatt)
noremap <silent> <leader>h :wincmd h<cr>
noremap <silent> <leader>j :wincmd j<cr>
noremap <silent> <leader>k :wincmd k<cr>
noremap <silent> <leader>l :wincmd l<cr>

"Aaaand around buffers
nmap <silent> <S-Right> :bnext<CR>
nmap <silent> <S-Left> :bprevious<CR>

nmap <Leader>cp :let @*=expand("%")<CR>
nmap <Leader>cP :let @*=expand("%:p")<CR>
nmap <Leader>% :let<Space>@*=@%<CR>
" Tab navigation
noremap <silent> <D-A-Left> :tabp<CR>
noremap <silent> <D-A-Right> :tabn<CR>

" Indent with tab in visual mode
vnoremap <Tab> >gv|
vnoremap <S-Tab> <gv

nnoremap <silent> <leader>w :w<CR>
nnoremap <silent> <leader>q :BD<CR>

"bind BExec plugin to <leader>r (r -> run)
nmap <silent> <leader>r :call bexec#Normal()<CR>
vmap <silent> <leader>r :call bexec#Visual()<CR>

" Drew's workshop: . in visual mode repeats the command on each line
xnoremap . :norm.<CR>,

imap jj <Esc>

set exrc    " enable per-directory .vimrc files
set secure  " disable unsafe commands in local .vimrc files"

let g:ruby_indent_assignment_style = 'variable'
let g:ruby_indent_block_style = 'do'

let g:snipMate = { 'snippet_version' : 1 } " Get rid of deprecation
" let g:ale_linters = {'javascript': ['eslint'], 'ruby': ['ruby', 'rubocop', 'sorbet'], 'elixir': ['mix']}
let g:ale_linters = {'javascript': ['eslint'], 'ruby': ['ruby', 'rubocop'], 'elixir': ['mix']}

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Allow gf to open non-existent files
map gf :edit <cfile><cr>

" Emacs keybinding in command mode :evil:
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>

doautocmd User PlugLoaded " Configure plugins

" Clipboard integration in spin
if $SPIN == 1
    let g:clipboard = {
        \ 'name': 'pbcopy',
        \ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
        \ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
        \ 'cache_enabled': 1 }
end
