call plug#begin('~/.vim/plugged')
Plug 'https://github.com/tmhedberg/matchit.git'
Plug 'bufkill.vim'
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim', { 'on': 'Ack' }
Plug 'fholgado/minibufexpl.vim'
Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'scrooloose/nerdcommenter'
Plug 'fboender/bexec'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-endwise'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'mattn/emmet-vim'
Plug 'bronson/vim-visual-star-search'

Plug 'ervandew/supertab'

Plug 'w0rp/ale'
Plug 'pangloss/vim-javascript'
Plug 'vim-ruby/vim-ruby'
Plug 'mxw/vim-jsx'
Plug 'elixir-lang/vim-elixir'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-surround'

Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'


Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'garbas/vim-snipmate'
Plug 'tomtom/tlib_vim'

Plug 'mustache/vim-mustache-handlebars'
Plug 'stephpy/vim-yaml'
Plug 'xenoterracide/html.vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'bling/vim-airline'

Plug 'editorconfig/editorconfig-vim'

"Cool stuff I'm not using
"Plug 'rking/ag.vim'
"Plug 'maxbrunsfeld/vim-yankstack'
"Plugin 'digitaltoad/vim-jade'
call plug#end()

filetype plugin indent on


set shell=$SHELL\ -l
set background=dark
"Remove toolbar
if has("gui_running")
  set guioptions-=T
  nmap <silent> <C-Tab> :maca _cycleWindows:<CR>
  nmap <silent> <C-S-Tab> :maca _cycleWindowsBackwards:<CR>
  set balloondelay=100000 " Long balloon to avoir huge tooltip in ruby files
  set guioptions+=c
endif
colorscheme Tomorrow-Night-Bright
syntax on

set nobackup
set noswapfile
set nojoinspaces

set number
set showmode
set tabstop=2 shiftwidth=2 softtabstop=2 et
set hidden

set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,.DS_Store,*.pyc,*/tmp/*,*/dist/*,

set cursorline

set list listchars=tab:»\ ,trail:·

filetype on
filetype plugin indent on
set backspace=2
set vb
runtime macros/matchit.vim

set encoding=utf-8
set fileencoding=utf-8
set hlsearch
set stl=%f\ %m\ %r\ L:\ %l/%L[%p%%]\ C:\ %c\ Buf:\ #%n
set laststatus=2
set history=100
set scrolloff=5
set incsearch
set ignorecase
set infercase " Gives case sensitive autocompletion
set smartcase
set gdefault " Always search/replace globally
set nostartofline

" Typing :W -> :w
cnoreabbrev W w
" Typing :F -> :NERDTreeFind
cnoreabbrev F NERDTreeFind

"php settings
au BufRead,BufNewFile *.php setfiletype php
au BufRead,BufNewFile *.ctp setfiletype php
let php_htmlInStrings = 1

" Thorfile, Rakefile, Vagrantfile and Gemfile Guardfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,Guardfile}    set ft=ruby

au BufRead,BufNewFile *.js.tpl set ft=javascript

"Key bidings
let mapleader = ","
let g:mapleader = ","
nmap <silent> <c-n> :NERDTreeToggle<CR>
noremap <silent> <Space> :silent noh<Bar>echo<CR>
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F3>
"Moving around windows (taken from Derek Wyatt)
noremap <silent> ,h :wincmd h<cr>
noremap <silent> ,j :wincmd j<cr>
noremap <silent> ,k :wincmd k<cr>
noremap <silent> ,l :wincmd l<cr>

" Tab navigation
noremap <silent> <D-A-Left> :tabp<CR>
noremap <silent> <D-A-Right> :tabn<CR>

" Indent with tab in visual mode
vnoremap <Tab> >gv|
vnoremap <S-Tab> <gv

"Faster prev-buffer
nnoremap <leader><leader> <c-^>
"Faster save
nnoremap <silent> <leader>w :w<CR>

"bind BExec plugin to <leader>r (r -> run)
nmap <silent> <leader>r :call bexec#Normal()<CR>
vmap <silent> <leader>r :call bexec#Visual()<CR>

"NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.o$']

"Don't need f1 for help
nmap <F1> <nop>

nmap <silent> <Leader>b :CtrlPBuffer<CR>
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_switch_buffer = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc$\|node_modules$\|dist$\|tmp$',
  \ 'file': '\.exe$\|\.so$\|\.dat$\|\.pyc$'
  \ }

let g:miniBufExplCheckDupeBufs = 0 "Faster miniBufExpl

" meta-p/P without killing regular accents
nmap π <Plug>yankstack_substitute_older_paste
xmap π <Plug>yankstack_substitute_older_paste
imap π <Plug>yankstack_substitute_older_paste
nmap ∏ <Plug>yankstack_substitute_newer_paste
xmap ∏ <Plug>yankstack_substitute_newer_paste
imap ∏ <Plug>yankstack_substitute_newer_paste

imap jj <Esc>

"Unmap some unsued buffer command to use command-t with buffers (<Leader>b)
autocmd VimEnter *  unmap <Leader>bundo
autocmd VimEnter *  unmap <Leader>bw
autocmd VimEnter *  unmap <Leader>bb
autocmd VimEnter *  unmap <Leader>bf
autocmd VimEnter *  unmap <Leader>bun
autocmd VimEnter *  unmap <Leader>bd
autocmd VimEnter *  unmap <Leader>ba
autocmd VimEnter *  unmap <Leader>bx
autocmd VimEnter *  unmap <Leader>bc
autocmd VimEnter *  unmap <Leader>bl

"4 spaces for markdown
" NOPE!
" autocmd FileType markdown setlocal sw=4 sts=4 et

set exrc    " enable per-directory .vimrc files
set secure  " disable unsafe commands in local .vimrc files"

" Set lang for macvim also, apparently system locale isnt loaded by default
lang en_CA.UTF-8


" Airline
set guifont=Droid\ Sans\ Mono\ for\ Powerline:h13
let g:airline_powerline_fonts = 1
set noshowmode

let g:ale_linters = {'javascript': ['jshint'], 'ruby': ['ruby']}



let g:NERDTreeDirArrowExpandable = "▸"
let g:NERDTreeDirArrowCollapsible = "▾"

" stolen from Thoughtbot
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif


" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" PHP tabs
autocmd Filetype php setlocal ts=4 sts=4 sw=4 noet
